stages:
    - build
    - test
    - badges
    - deploy
    
services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]

variables:
    DOCKER_TLS_CERTDIR: ""
    QUALITY_BASE_REPO: https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.widas.de/widas/codequality.git
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"

image: docker:git

#gradle_build:
#    stage: build
#    variables:
#      DOCKER_DRIVER: overlay2
#      DOCKER_TLS_CERTDIR: ""
#    script: 
#      - export GRADLE_USER_HOME=`pwd`/.gradle
#      - docker run 
#        --volume /var/run/docker.sock:/var/run/docker.sock
#        --volume "$PWD":/code
#        --rm -v "$PWD":/code gradle gradle test
#      - cat cidaas-sdk-android/target/site/jacoco-aggregate-ut/index.html
#    artifacts:
#        paths:
#            - cidaas-sdk-android/target/site/jacoco-aggregate-ut

code_quality_json:
  stage: test
  allow_failure: true
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    CODE_QUALITY_IMAGE: "registry.gitlab.com/gitlab-org/ci-cd/codequality:0.85.9"
  script:
    - docker pull "$CODE_QUALITY_IMAGE"
    # Clone the .codeclimate.yml from the code quality base repo
    - git clone ${QUALITY_BASE_REPO}
    - ls -lah
    - cp codequality/conf/codeclimate/rules/java/.codeclimate.yml .
    - ls -lah
    - rm -rf codequality
    # Run the codeclimate image from gitlab
    - docker run
        --env SOURCE_CODE="$PWD"
        --env CODECLIMATE_CODE="$PWD/app" 
        --volume /tmp/cc:/tmp/cc
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "$CODE_QUALITY_IMAGE" /code
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths: [gl-code-quality-report.json]
  dependencies: []
  rules:
    - if: '$CODE_QUALITY_DISABLED'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'
    
code_quality_html:
  stage: test
  allow_failure: true
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker pull codeclimate/codeclimate
    # Clone the .codeclimate.yml from the code quality base repo
    - git clone ${QUALITY_BASE_REPO}
    - cp codequality/conf/codeclimate/rules/java/.codeclimate.yml .
    - rm -rf codequality
    - cat .codeclimate.yml
    # Install the code climate engines
    - docker run
        --env SOURCE_CODE="$PWD"
        --env CODECLIMATE_CODE="$PWD" 
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        --volume /tmp/cc:/tmp/cc
        codeclimate/codeclimate engines:install > /dev/null
    # Run code climate
    - docker run
        --env SOURCE_CODE="$PWD"
        --env CODECLIMATE_CODE="$PWD" 
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        --volume /tmp/cc:/tmp/cc
        codeclimate/codeclimate analyze /code -f html > codeclimate.html
  artifacts:
    paths: [codeclimate.html]
  dependencies: []
  rules:
    - if: '$CODE_QUALITY_DISABLED'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'

create_codequality_badges:
    image: python:3-stretch
    stage: badges
    dependencies:
     - code_quality_json
    script:
     - git clone ${QUALITY_BASE_REPO}
     - cp codequality/src/calculate_codeclimate_metrics.py .
     - rm -rf codequality
     - python3 calculate_codeclimate_metrics.py gl-code-quality-report.json

     # Parse the code coverage
#     - mv codecoverage/target/site/jacoco-aggregate-ut/index.html .
#     - git clone ${QUALITY_BASE_REPO}
#     - cp codequality/src/count_lines_java_code.py .
#     - rm -rf codequality
#     - python3  count_lines_java_code.py
     
     - pip install anybadge
    
     - export BADGE_COLOR_RANGE_MINOR="10=green 20=yellow 50=orange 100=red 200=brightred"
     - export BADGE_COLOR_RANGE_MAJOR="1=green 10=yellow 40=orange 100=red 150=brightred"
     - export BADGE_COLOR_RANGE_CRITICAL="1=green 5=yellow 20=orange 40=red 80=brightred"
     - export BADGE_COLOR_RANGE_FIXME="1=green 10=yellow 30=orange 50=red 100=brightred"
     - export BADGE_COLOR_RANGE_TOTAL="1=green 50=yellow 100=orange 200=red 300=brightred"

     - export DATE=$(cat date.txt)
     - anybadge -l sw_quality -v "$DATE" -f sw_quality.svg --color=green
    
     - export TOTAL_ISSUES=$(cat total_issues.txt)
     - anybadge -l total_issues -v $TOTAL_ISSUES -m "%d" -u -f total_issues.svg $BADGE_COLOR_RANGE_TOTAL
     
     - export CRITICAL_ISSUES=$(cat critical_issues.txt)
     - anybadge -l critical_issues -v $CRITICAL_ISSUES -m "%d" -u -f critical_issues.svg $BADGE_COLOR_RANGE_CRITICAL
          
     - export BLOCKER_ISSUES=$(cat blocker_issues.txt)
     - anybadge -l blocker_issues -v $BLOCKER_ISSUES -m "%d" -u -f blocker_issues.svg $BADGE_COLOR_RANGE_CRITICAL
          
     - export MAJOR_ISSUES=$(cat major_issues.txt)
     - anybadge -l major_issues -v $MAJOR_ISSUES -m "%d" -u -f major_issues.svg $BADGE_COLOR_RANGE_MAJOR
          
     - export MINOR_ISSUES=$(cat minor_issues.txt)
     - anybadge -l minor_issues -v $MINOR_ISSUES -m "%d" -u -f minor_issues.svg $BADGE_COLOR_RANGE_MINOR
    
     - export FIXME_ISSUES=$(cat fixme_issues.txt)
     - anybadge -l fixmes -v $FIXME_ISSUES -m "%d" -u -f fixme_issues.svg $BADGE_COLOR_RANGE_FIXME

     - export DUPLICATION_ISSUES=$(cat duplication_issues.txt)
     - anybadge -l duplications -v $DUPLICATION_ISSUES -m "%d" -u -f duplication_issues.svg $BADGE_COLOR_RANGE_CRITICAL
     
#     - export LOC=$(cat loc.txt)
#     - anybadge -l LoC -v $LOC -f loc.svg --color=green
     
#     - export CLASSES=$(cat classes.txt)
#     - anybadge -l Classes -v $CLASSES -f classes.svg --color=green
    
     - mkdir public
     - mv *.svg public
    artifacts:
      paths:
        - public/*.svg

pages:
    image: maven:3-jdk-8
    stage: deploy
    dependencies:
        - code_quality_html
        - create_codequality_badges
    script:
        - mv codeclimate.html public/index.html
    artifacts:
        paths:
            - public