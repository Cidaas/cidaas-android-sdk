apply plugin: 'com.android.library'
apply plugin: "jacoco"
jacoco {
    toolVersion = '0.8.0'
}
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "0.0.0.7"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {

            minifyEnabled false
            //testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests {
            includeAndroidResources = true
        }

    }
    sourceSets { main { assets.srcDirs = ['src/main/assets', 'src/test/assets/'] } }
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //For Retrofit Call
    implementation 'com.squareup.retrofit2:converter-jackson:2.1.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'

    //For Reactive X
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'io.reactivex:rxjava:1.2.9'
    implementation 'com.jakewharton.rxbinding:rxbinding:1.0.1'

    //For Custom Tabs
    implementation 'com.android.support:customtabs:28.0.0'

    //For Encryption
    implementation 'com.scottyab:aescrypt:0.0.1'

    //Timber
    compile 'com.jakewharton.timber:timber:4.6.1'

    // common codec for TOTP Generation
    implementation 'commons-codec:commons-codec:1.10'

    //Android X for finger print authentication after android pie
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha02'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.android.support:design:28.0.0-alpha1'

    //Testing
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

    // testImplementation "org.robolectric:robolectric:3.8"
    //Testing
    // Required -- JUnit 4 framework
    testImplementation 'junit:junit:4.12'
    // Optional -- Mockito framework


    testImplementation 'org.robolectric:robolectric:3.8'

    testImplementation 'com.squareup.okhttp3:mockwebserver:3.8.0'

    testImplementation "com.android.support.test:monitor:1.0.2"
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.22.0'

    /*///For ID card Scannner
    compile 'io.card:android-sdk:5.5.1'*/
}


task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*',
                      'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}